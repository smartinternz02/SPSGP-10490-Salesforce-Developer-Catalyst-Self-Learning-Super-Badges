public with sharing class MaintenanceRequestHelper 
{
    public static void updateworkOrders(List<Case> updWorkOrders, Map<Id,Case> nonUpdCaseMap) 
    {
        Set<Id> ARM_valid_ids = new Set<Id>();
        For (Case c : updWorkOrders)
        {
            if (nonUpdCaseMap.get(c.Id).Status != 'Closed' && c.Status == 'Closed')
            {
                if (c.Type == 'Repair' || c.Type == 'Routine Maintenance')
                {
                    ARM_valid_ids.add(c.Id);
                }
            }
        }
        if (!ARM_valid_ids.isEmpty())
        {
            List<Case> ARM_new_cases = new List<Case>();
            Map<Id,Case> ARM_closed_cases = new Map<Id,Case>([SELECT Id, Vehicle__c, Equipment__c, Equipment__r.Maintenance_Cycle__c,(SELECT Id,Equipment__c,Quantity__c FROM Equipment_Maintenance_Items__r) 
                                                         FROM Case WHERE Id IN :ARM_valid_ids]);
            Map<Id,Decimal> ARM_maintenance_cycles = new Map<ID,Decimal>();
            AggregateResult[] ARM_results = [SELECT Maintenance_Request__c, MIN(Equipment__r.Maintenance_Cycle__c)cycle FROM Equipment_Maintenance_Item__c WHERE Maintenance_Request__c IN :ARM_valid_ids GROUP BY Maintenance_Request__c];
            
            for (AggregateResult ar : ARM_results)
            { 
                ARM_maintenance_cycles.put((Id) ar.get('Maintenance_Request__c'), (Decimal) ar.get('cycle'));
            }
            
            for(Case cc : ARM_closed_cases.values())
            {
                Case nc = new Case 
                (
                    ParentId = cc.Id,
                    Status = 'New',
                    Subject = 'Routine Maintenance',
                    Type = 'Routine Maintenance',
                    Vehicle__c = cc.Vehicle__c,
                    Equipment__c =cc.Equipment__c,
                    Origin = 'Web',
                    Date_Reported__c = Date.Today()
                );
                If (ARM_maintenance_cycles.containskey(cc.Id))
                {
                    nc.Date_Due__c = Date.today().addDays((Integer) ARM_maintenance_cycles.get(cc.Id));
                }
                ARM_new_cases.add(nc);
            }
           
           insert ARM_new_cases;
           
           List<Equipment_Maintenance_Item__c> clonedWPs = new List<Equipment_Maintenance_Item__c>();
           
           for (Case nc : ARM_new_cases)
           {
                for (Equipment_Maintenance_Item__c wp : ARM_closed_cases.get(nc.ParentId).Equipment_Maintenance_Items__r)
                {
                    Equipment_Maintenance_Item__c wpClone = wp.clone();
                    wpClone.Maintenance_Request__c = nc.Id;
                    ClonedWPs.add(wpClone);
                }
            }
            insert ClonedWPs;
        }
    }
}
